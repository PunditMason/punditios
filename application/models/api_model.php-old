<?php
error_reporting(0);  

class Api_model extends CI_Model {

    private $teams;
    private $season;
    private $users;

    public function __construct()
    {
        $this->load->database();
    }

    function get_teams() {
        if(!$this->teams) {
            $this->load->model("Team_model");
            $this->teams = $this->Team_model->get_all_team_name_indexed();
        }

        return $this->teams;
    }


    // function get_active() {
    //   $this->db->select(*);
    //    $this->db->from('active_users');
    //    $query = $this->db->get();
    //    return $query;
    // }

    function get_season() {
        if(!$this->season) {
            $this->load->model("Season_model");
            $this->season = $this->Season_model->get_all_season_name_indexed();
        }

        return $this->season;
    }

		function get_users() {
			if(!$this->users) {
				$this->load->model("Users_model");
				$this->users = $this->Users_model->get_all_user_name_indexed();
			}

			return $this->users;
		}



     public function get_match_data( $sport = '', $league = '',$match_start_date)
    {
        
        
        $start_date = strtotime("-30 day", strtotime($match_start_date));        
        $startdate = date("Y-m-d", $start_date);
        $end_date = strtotime("+60 day", strtotime($match_start_date));
        $enddate = date("Y-m-d", $end_date);
        
        $matches = array();
        $this->db->distinct();
        $this->db->select('a.*, a.id AS data_id');
        $this->db->from('match a');
        $this->db->join('season b', 'b.id = a.season_id', 'left');
        $this->db->where('b.sport_id', $sport);
        $this->db->where('b.league_id', $league);
        //$this->db->where('a.match_start_date',$match_start_date); 
        //$this->db->where('a.match_start_date BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW()');
        //$this->db->where("a.match_start_date ='".$startdate."' OR a.match_start_date ='".$enddate."'");
        
        $this->db->where('a.match_start_date >=', $startdate);
        $this->db->where('a.match_start_date <=', $enddate);
        
        $this->db->order_by('a.id', 'asc');
        $this->db->group_by('a.match_id');
        $query = $this->db->get();

        if($query->num_rows() != 0)
        {
            $teams = $this->get_teams();
			
            $seasons = $this->get_season();
               
            foreach( $query->result_array() as $row ) {
               
                $match = $row;
                $match['team1_name'] = $teams[$row['team1_id']];
                $match['team2_name'] = $teams[$row['team2_id']];
                $match['season_name'] = $seasons[$row['season_id']];

            //$matches[] = array_filter($match);
            $matches[] = $match;
            
        }
        }

        return $matches;
    }
    
     public function get_match_data_filter( $sport = '', $league = '',$match_start_date)
    {
        
        
        $start_date = strtotime("0 day", strtotime($match_start_date));        
        $startdate = date("Y-m-d", $start_date);
        $end_date = strtotime("+6 day", strtotime($match_start_date));
        $enddate = date("Y-m-d", $end_date);
        
        $matches = array();
        $this->db->distinct();
        $this->db->select('a.*, a.id AS data_id');
        $this->db->from('match a');
        $this->db->join('season b', 'b.id = a.season_id', 'left');
        $this->db->where('b.sport_id', $sport);
        $this->db->where('b.league_id', $league);
        //$this->db->where('a.match_start_date',$match_start_date); 
        //$this->db->where('a.match_start_date BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW()');
        //$this->db->where("a.match_start_date ='".$startdate."' OR a.match_start_date ='".$enddate."'");
        
        $this->db->where('a.match_start_date >=', $startdate);
        $this->db->where('a.match_start_date <=', $enddate);
        
        $this->db->order_by('a.id', 'asc');
        $this->db->group_by('a.match_id');
        $query = $this->db->get();

        if($query->num_rows() != 0)
        {
            $teams = $this->get_teams();
			
            $seasons = $this->get_season();
               
            foreach( $query->result_array() as $row ) {
               
                $match = $row;
                $match['team1_name'] = $teams[$row['team1_id']];
                $match['team2_name'] = $teams[$row['team2_id']];
                $match['season_name'] = $seasons[$row['season_id']];

            //$matches[] = array_filter($match);
            $matches[] = $match;
            
        }
        }

        return $matches;
    }

    public function get_channel_data( $sport = '', $league = '' )
    {
        $channels = array();

        $this->db->select('*, a.id AS data_id');
        $this->db->from('channel a');
        $this->db->join('match b', 'b.match_id = a.match_id', 'left');
        $this->db->join('season c', 'c.id = b.season_id', 'left');
        $this->db->where('a.live', '1');
        $this->db->where('c.sport_id', $sport);
        $this->db->where('c.league_id', $league);
        $this->db->order_by('a.id', 'asc');
        $query = $this->db->get();

        if($query->num_rows() != 0)
        {
            $teams = $this->get_teams();
            $seasons = $this->get_season();
            $users = $this->get_users();

            foreach( $query->result_array() as $row ) {
                $channel = $row;
                $channel['team1_name'] = $teams[$row['team1_id']];
                $channel['team2_name'] = $teams[$row['team2_id']];
                $channel['season_name'] = $seasons[$row['season_id']];
                $channel['broadcaster_name'] = $users[$row['broadcaster_id']];

                $channels[] = $channel;
            }
        }

        return $channels;
    }

    public function get_pundit_data( $match_id )
    {
        $pundits = array();

        $this->db->select('*, a.id AS data_id, COUNT(d.id) AS listeners');
        $this->db->from('channel a');
        $this->db->join('match b', 'b.match_id = a.match_id', 'left');
        $this->db->join('season c', 'c.id = b.season_id', 'left');
        $this->db->join('listeners d', 'd.channel_id = a.id', 'left');

        $this->db->where('a.match_id', $match_id);
        $this->db->where('a.live', '1');
        $this->db->order_by('a.id', 'asc');
        $query = $this->db->get();

        if($query->num_rows() != 0)
        {
            $teams = $this->get_teams();
            $seasons = $this->get_season();
            $users = $this->get_users();

            foreach( $query->result_array() as $row ) {
               
                $pundit = $row;
                $pundit['team1_name'] = $teams[$row['team1_id']];
                $pundit['team2_name'] = $teams[$row['team2_id']];
                $pundit['season_name'] = $seasons[$row['season_id']];
                $pundit['broadcaster_name'] = $users[$row['broadcaster_id']];
                $channel['appName'] = $users[$row['appName']];
                $channel['streamName'] = $users[$row['streamName']];
                $pundits[] = $pundit;



            }
        }

        return $pundits;
    }
	public function get_match_score($match_id = '')
    {
        $pundits = array();

        $this->db->select('*');
        $this->db->from('match');
        $this->db->where('match_id',$match_id);
        
        $query = $this->db->get();
           if(count($query) > 0) {
                $getscore = $query->result_array();
				
            }

        return $getscore;
    }
    
    public function matchFeed($match_id)
    {
        $matchFeed = array();

         $this->db->select('*');
         $this->db->from('match');
         $this->db->where('match_id',$match_id);
        
       
         $query = $this->db->get();
           if(count($query) > 0) {
                $matchFeed = $query->result_array();
				
            }

        return $matchFeed;
    }
      public function competitionFeed($match_id)
    {
        $competitionFeed = array();

         $this->db->select('*');
         $this->db->from('competition');
         $this->db->where('match_id',$match_id);
         
         $query = $this->db->get();
           if(count($query) > 0) {
                $competitionFeed = $query->result_array();
				
            }

        return $competitionFeed;
    }
     public function tournamentCalendarFeed($match_id)
    {
        $tournamentCalendarFeed = array();

         $this->db->select('*');
         $this->db->from('tournamentCalendar');
         $this->db->where('match_id',$match_id);
         
        $query = $this->db->get();
           if(count($query) > 0) {
                $tournamentCalendarFeed = $query->result_array();
				
            }

        return $tournamentCalendarFeed;
    }
    public function contestantFeed($match_id)
    {
        $contestantFeed = array();

         $this->db->select('*');
         $this->db->from('contestant');
         $this->db->where('match_id',$match_id);
        
         $query = $this->db->get();
           if(count($query) > 0) {
                $contestantFeed = $query->result_array();
				
            }

        return $contestantFeed;
    }
    public function cardFeed($match_id)
    {
        $cardLiveFeed = array();

         $this->db->select('*');
         $this->db->from('card');
         $this->db->where('match_id',$match_id);
          $this->db->order_by("timeMin", "asc");
       
         $query = $this->db->get();
           if(count($query) > 0) {
                $cardLiveFeed = $query->result_array();
				
            }

        return $cardLiveFeed;
    }
    public function scoresFeed($match_id)
    {
        $scoresLiveFeed = array();

         $this->db->select('*');
         $this->db->from('scores');
         $this->db->where('match_id',$match_id);
        
         $query = $this->db->get();
           if(count($query) > 0) {
                $scoresLiveFeed = $query->result_array();
				
            }

        return $scoresLiveFeed;
    }
    public function goalFeed($match_id)
    {
        $goalLiveFeed = array();

         $this->db->select('*');
         $this->db->from('goal');
         $this->db->where('match_id',$match_id);
         $this->db->order_by("timeMin", "asc");
       
         $query = $this->db->get();
           if(count($query) > 0) {
                $goalLiveFeed = $query->result_array();
				
            }

        return $goalLiveFeed;
    }
    public function substituteFeed($match_id)
    {
        $substituteLiveFeed = array();

         $this->db->select('*');
         $this->db->from('substitute');
         $this->db->where('match_id',$match_id);
         $this->db->order_by("timeMin", "asc");
       
         $query = $this->db->get();
           if(count($query) > 0) {
                $substituteLiveFeed = $query->result_array();
				
            }

        return $substituteLiveFeed;
    }
	
	
	public function league_name()
    {
		
        $pundits = array();

        $this->db->select('*');
        $this->db->from('sport s');
         $this->db->join('league l', 'l.sport_id=s.id', 'right');
		//$this->db->where('l.sport_id',$id);
		//$this->db->order_by("s.sport_id", "desc");
		//$this->db->where('s.id','4');
        $query = $this->db->get();
		//echo $query->num_rows();
		//print_r($query);
           if(count($query) > 0) {
                $league_name[] = $query->result_array();
                foreach($league_name as $val){
				//$league_name = $val;
				}
				
            }

        return $league_name;
    }
	
	public function sport_name()
    {
        $sport_name = array();

        $this->db->select('*');
        $this->db->from('sport');
	
        $query = $this->db->get();
           if(count($query) > 0) {
                //$sport_name = $query->result_array();
				
				$league_name = $this->league_name();
			
			  foreach($league_name as $value){
				
					 foreach($value as $abc)
					 {
				$jkl[]=$abc;
				 }
			  }
            foreach( $query->result_array() as $row ) {
					$match = $row;
              foreach($jkl as $res)
			  {
		
		
							  
					 if($row['id']==$res['sport_id'])
					 {
						  
						
						  $match['league'][] = $res;
					 }
		 } 
			  
			  
	
				
					 
					
       
			 
				 
				
          
			 $sport_name[] = $match;
		   }
		   }
        return $sport_name;
    }
	
    
    public function get_week_match( $sport = '1', $league = '1',$week,$match_date)
    {
      
        $matches = array();
        $this->db->distinct();
        $this->db->select('a.*, a.id AS data_id');
        $this->db->from('match a');
        $this->db->join('season b', 'b.id = a.season_id', 'left');
        $this->db->where('b.sport_id', $sport);
        $this->db->where('b.league_id', $league);
        $this->db->where('a.match_week',$week);
        $this->db->where('a.match_date',$match_date); 
        //$this->db->where('a.match_start_date BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW()');
        //$this->db->where("a.match_start_date ='".$startdate."' OR a.match_start_date ='".$enddate."'");
        $this->db->order_by('a.id', 'asc');
        $this->db->group_by('a.match_id');
        $query = $this->db->get();

        if($query->num_rows() != 0)
        {
            $teams = $this->get_teams();
			
            $seasons = $this->get_season();
               
            foreach( $query->result_array() as $row ) {
               
                $match = $row;
                $match['team1_name'] = $teams[$row['team1_id']];
                $match['team2_name'] = $teams[$row['team2_id']];
                $match['season_name'] = $seasons[$row['season_id']];

            //$matches[] = array_filter($match);
            $matches[] = $match;
            
        }
        }

        return $matches;
    }
    
   public function live_teams()
    {
		
		$getsteamtype = array();

        $this->db->select('*');   
        $this->db->from('channel a');
        $this->db->join('standings s', 'a.match_id = s.contestantId', 'left');
        $this->db->where('a.live', '1');
        $this->db->where('a.channel_type', 'team');
        
         $query = $this->db->get();
           if(count($query) > 0) {
                $getsteamtype = $query->result_array();
				
            }

        return $getsteamtype;
		
		
		}
		
		
		public function get_league_stat()
    {
        $league_stat = array();
        
         $this->db->select('s.id,s.rank,s.rankStatus,s.lastRank,s.contestantId,s.contestantName,s.contestantShortName,s.contestantClubName,s.contestantCode,s.points,s.matchesPlayed,s.matchesWon,s.matchesLost,s.matchesDrawn,s.goalsFor,s.goalsAgainst,s.goaldifference,s.last_update,c.match_id,c.channel_type,c.live, count(s.contestantId) as count_match');   
        $this->db->from('standings s');
		 //$this->db->from('channel c');
        $this->db->join('channel c', 's.contestantId = c.match_id','left');
        //$this->db->where('c.live', '0');
		   $this->db->group_by(array("s.contestantId", "c.live", "c.channel_type"));
		 // $this->db->group_by('c.station');
		     $this->db->order_by('s.contestantId',"asc");
        $query = $this->db->get();
           
        //$c=$query->num_rows();
		$c=1;
		$m=0;
		
		   if(count($query) > 0) {
                //$league_stat = $query->result_array();
				$live = $this->live_teams();
				foreach( $query->result_array() as $row ) {
					$channel = $row;
					//$channel['live_listeners'] =count($live[$row['channel_type']]);
                //$j=$channel['live'];
				//$k=$channel['channel_type'];
				if($channel['live']==1 && $channel['channel_type']=='team')
				{
				
					if($channel['count_match']>=0)
					{
						
						$channel['live_listeners'] =$channel['count_match'];
				}
				}
				else{
					$channel['live_listeners']=$m;
				}
			
				 $league_stat[] = $channel;
				 //$league_stat = $query->result_array();
				}
			
           /* if(count($query) > 0) {
                $league_stat = $query->result_array();
				$live = $this->live_teams();
                foreach($query->result_array() as $ress){
					$channel = $row;
					//$channel['live_listeners'] =count($live[$row['channel_type']]);
                 $channel['live_listeners'] =$c;
				 $league_stat[] = $channel;
					
					 //$channel = $ress;
					//echo "<pre>";
					//print_r($ress);
					 //echo $channell= count($ress['live']);
					 //$channel['live_listeners']= count($ress['live']);
					 //$league_stat[] = $channel;
					
					}
			 */	
            }

        return $league_stat;
    }
    /*public function get_league_stat()
    {
        $league_stat = array();
        
        $this->db->select('*');
        $this->db->from('standings');
        $query = $this->db->get();
           
           if(count($query) != 0) {
			   
			    //$live_teams = $this->live_teams();
			    //echo "<pre>";
			    //print_r($live_teams);
			    
			    foreach($query->result_array() as $res){
					
					
		        $channel = $res;
                $channel['live_listeners'] = $live_teams[$res['live']];
                $league_stat[] = $channel;
					 
					
					}
                $league_stat = $query->result_array();
				
            }
       return $league_stat;
    }*/

    
    function get_team_channel_list($sport='1',$league='1')
    {
     
       $teamchannels = array();
        $this->db->select('*, a.id AS data_id');
        $this->db->from('channel a');
        $this->db->join('match b', 'b.match_id = a.match_id', 'left');
        $this->db->join('season c', 'c.id = b.season_id', 'left');
        $this->db->where('c.sport_id', $sport);
        $this->db->where('c.league_id', $league);
        $this->db->order_by('a.id', 'asc');
        $query = $this->db->get();

        if($query->num_rows() != 0)
        {
            $teams = $this->get_teams();
            $seasons = $this->get_season();
            $users = $this->get_users();

            foreach( $query->result_array() as $row ) {
                $channel = $row;
                $channel['team1_name'] = $teams[$row['team1_id']];
                $channel['team2_name'] = $teams[$row['team2_id']];
                $channel['season_name'] = $seasons[$row['season_id']];
                $channel['broadcaster_name'] = $users[$row['broadcaster_id']];

                $teamchannels[] = $channel;
            }
        }

        return $teamchannels;
    
    
    }
     
    
    public function teamstat($contestantId)
    {
        $pundits = array();

        $this->db->select('*');
        $this->db->from('standings');
        $this->db->where('contestantId',$contestantId);
        
        $query = $this->db->get();
           if(count($query) > 0) {
                $getscore = $query->result_array();
               
                
				
            }

        return $getscore;
    }
    
    
    
    public function broadcasters($sport, $league)
    {
		
		$getsteamtype = array();

        $this->db->select('*, a.id AS data_id');   
        $this->db->from('channel a');
        $this->db->where('a.live', '1');
        $this->db->where('a.channel_type', 'team');
        //$this->db->where('season.sport_id', $sport);
        //$this->db->where('season.league_id', $league);
        $query = $this->db->get();
           if(count($query) > 0) {
                $getsteamtype = $query->result_array();
				
            }

        return $getsteamtype;
		
		
		}
    
    
    
    public function channel_list( $sport = '1', $league = '1' )
    {
        $channels = array();

        $this->db->select('*, a.id AS data_id');
        $this->db->from('channel a');
        $this->db->join('match b', 'b.match_id = a.match_id', 'left');
        $this->db->join('season c', 'c.id = b.season_id', 'left');
        //$this->db->where('a.live', '1');
        $this->db->where('c.sport_id', $sport);
        $this->db->where('c.league_id', $league);
        $this->db->order_by('a.id', 'asc');
        $query = $this->db->get();

        if($query->num_rows() != 0)
        {
            $teams = $this->get_teams();
            $seasons = $this->get_season();
            $users = $this->get_users();

            foreach( $query->result_array() as $row ) {
                $channel = $row;
                $channel['team1_name'] = $teams[$row['team1_id']];
                $channel['team2_name'] = $teams[$row['team2_id']];
                $channel['season_name'] = $seasons[$row['season_id']];
                $channel['broadcaster_name'] = $users[$row['broadcaster_id']];

                $channels[] = $channel;
            }
        }

        return $channels;
    }
    
    
    function add_follow($data)
    {
        $insert = $this->db->insert('follow', $data);
        return $insert;
    }
    
     public function get_follow($follower_id, $following_id,$status)
    {
		
		 $active_follower = 1;
        
          $publish_date = date("Y-m-d-H-i-s");
        
        //$station = $station."-".$publish_date;
        $streamName = $station;
        
        // check if follower is already exist
        $this->db->select('*');
        $this->db->from('follow');
        $this->db->where('follower_id', $follower_id);
        $query = $this->db->get();

        if(count($query) > 0) {
            // same follower is already exist
            //$active_channel_id = $query[0]['id'];
             $active_follower = $query->result_array();
		}
             $this->db->select('*');
            $this->db->from('follow');
            $this->db->where('follower_id', $follower_id);
            $data_to_update = array(
                'follower_id' => $follower_id,
                'following_id' => $following_id,
                'status' =>$status
            );
            $this->db->update('follow', $data_to_update); 
         else {
            // follower is not exist, should create new
            $data_to_store = array(
                'follower_id' => $follower_id,
                'following_id' => $following_id,
                'status' =>$status,
                'follow_on_time' => $publish_date
                  
            );
            $this->add_follow($data_to_store);
           /$this->db->insert('follow', $data_to_store);
//$this->add($data_to_store);
            $this->db->select('*');
            $this->db->from('follow');
            $this->db->where('follower_id', $follower_id);
            
            $query = $this->db->get();

            if(count($query) > 0) {
                //$active_channel_id = $query[0]['id'];
                 $active_follower = $query->result_array();
            }
        }

        return $active_follower;
    }

}
